// Code generated by protoc-gen-go. DO NOT EDIT.
// source: files.proto

package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ZipRequest struct {
	Auth                 *Authentication `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	FullPaths            []string        `protobuf:"bytes,2,rep,name=fullPaths" json:"fullPaths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ZipRequest) Reset()         { *m = ZipRequest{} }
func (m *ZipRequest) String() string { return proto.CompactTextString(m) }
func (*ZipRequest) ProtoMessage()    {}
func (*ZipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{0}
}
func (m *ZipRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZipRequest.Unmarshal(m, b)
}
func (m *ZipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZipRequest.Marshal(b, m, deterministic)
}
func (dst *ZipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZipRequest.Merge(dst, src)
}
func (m *ZipRequest) XXX_Size() int {
	return xxx_messageInfo_ZipRequest.Size(m)
}
func (m *ZipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZipRequest proto.InternalMessageInfo

func (m *ZipRequest) GetAuth() *Authentication {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ZipRequest) GetFullPaths() []string {
	if m != nil {
		return m.FullPaths
	}
	return nil
}

type PathRequest struct {
	Auth                 *Authentication `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	FullPath             string          `protobuf:"bytes,2,opt,name=fullPath" json:"fullPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PathRequest) Reset()         { *m = PathRequest{} }
func (m *PathRequest) String() string { return proto.CompactTextString(m) }
func (*PathRequest) ProtoMessage()    {}
func (*PathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{1}
}
func (m *PathRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathRequest.Unmarshal(m, b)
}
func (m *PathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathRequest.Marshal(b, m, deterministic)
}
func (dst *PathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathRequest.Merge(dst, src)
}
func (m *PathRequest) XXX_Size() int {
	return xxx_messageInfo_PathRequest.Size(m)
}
func (m *PathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PathRequest proto.InternalMessageInfo

func (m *PathRequest) GetAuth() *Authentication {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *PathRequest) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

type SearchRequest struct {
	Auth                 *Authentication `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Term                 string          `protobuf:"bytes,2,opt,name=term" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{2}
}
func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (dst *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(dst, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetAuth() *Authentication {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *SearchRequest) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

type ShareRequest struct {
	Auth                 *Authentication `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	FullPath             string          `protobuf:"bytes,2,opt,name=fullPath" json:"fullPath,omitempty"`
	UserIDs              []uint32        `protobuf:"varint,3,rep,packed,name=userIDs" json:"userIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShareRequest) Reset()         { *m = ShareRequest{} }
func (m *ShareRequest) String() string { return proto.CompactTextString(m) }
func (*ShareRequest) ProtoMessage()    {}
func (*ShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{3}
}
func (m *ShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareRequest.Unmarshal(m, b)
}
func (m *ShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareRequest.Marshal(b, m, deterministic)
}
func (dst *ShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareRequest.Merge(dst, src)
}
func (m *ShareRequest) XXX_Size() int {
	return xxx_messageInfo_ShareRequest.Size(m)
}
func (m *ShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareRequest proto.InternalMessageInfo

func (m *ShareRequest) GetAuth() *Authentication {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ShareRequest) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

func (m *ShareRequest) GetUserIDs() []uint32 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type DirectoryContent struct {
	FileInfos            []*FileInfo `protobuf:"bytes,1,rep,name=fileInfos" json:"fileInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DirectoryContent) Reset()         { *m = DirectoryContent{} }
func (m *DirectoryContent) String() string { return proto.CompactTextString(m) }
func (*DirectoryContent) ProtoMessage()    {}
func (*DirectoryContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{4}
}
func (m *DirectoryContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectoryContent.Unmarshal(m, b)
}
func (m *DirectoryContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectoryContent.Marshal(b, m, deterministic)
}
func (dst *DirectoryContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryContent.Merge(dst, src)
}
func (m *DirectoryContent) XXX_Size() int {
	return xxx_messageInfo_DirectoryContent.Size(m)
}
func (m *DirectoryContent) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryContent.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryContent proto.InternalMessageInfo

func (m *DirectoryContent) GetFileInfos() []*FileInfo {
	if m != nil {
		return m.FileInfos
	}
	return nil
}

type Path struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{5}
}
func (m *Path) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Path.Unmarshal(m, b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Path.Marshal(b, m, deterministic)
}
func (dst *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(dst, src)
}
func (m *Path) XXX_Size() int {
	return xxx_messageInfo_Path.Size(m)
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type FileInfo struct {
	// @inject_tag: storm:"id,increment"
	ID                   uint32               `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty" storm:"id,increment"`
	Path                 string               `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Name                 string               `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IsDir                bool                 `protobuf:"varint,4,opt,name=isDir" json:"isDir,omitempty"`
	Size                 int64                `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	OwnerID              uint32               `protobuf:"varint,6,opt,name=ownerID" json:"ownerID,omitempty"`
	MimeType             string               `protobuf:"bytes,7,opt,name=mimeType" json:"mimeType,omitempty"`
	Starred              bool                 `protobuf:"varint,8,opt,name=starred" json:"starred,omitempty"`
	ParentID             uint32               `protobuf:"varint,9,opt,name=parentID" json:"parentID,omitempty"`
	LastChanged          *timestamp.Timestamp `protobuf:"bytes,10,opt,name=lastChanged" json:"lastChanged,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_files_821f6ef1973575c1, []int{6}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (dst *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(dst, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *FileInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *FileInfo) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *FileInfo) GetStarred() bool {
	if m != nil {
		return m.Starred
	}
	return false
}

func (m *FileInfo) GetParentID() uint32 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *FileInfo) GetLastChanged() *timestamp.Timestamp {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func init() {
	proto.RegisterType((*ZipRequest)(nil), "files.ZipRequest")
	proto.RegisterType((*PathRequest)(nil), "files.PathRequest")
	proto.RegisterType((*SearchRequest)(nil), "files.SearchRequest")
	proto.RegisterType((*ShareRequest)(nil), "files.ShareRequest")
	proto.RegisterType((*DirectoryContent)(nil), "files.DirectoryContent")
	proto.RegisterType((*Path)(nil), "files.Path")
	proto.RegisterType((*FileInfo)(nil), "files.FileInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FilesService service

type FilesServiceClient interface {
	ZipFiles(ctx context.Context, in *ZipRequest, opts ...grpc.CallOption) (*Path, error)
	GetFileInfo(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*DirectoryContent, error)
	UpdateFileInfo(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	CreateFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	DeleteFile(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	ShareFile(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	SearchForFile(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*FileInfo, error)
	GetStarredFiles(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*DirectoryContent, error)
	GetSharedFiles(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*DirectoryContent, error)
	RescanOwnFiles(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*EmptyMessage, error)
	RescanUserFilesByID(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetUpdateNotifications(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (FilesService_GetUpdateNotificationsClient, error)
}

type filesServiceClient struct {
	cc *grpc.ClientConn
}

func NewFilesServiceClient(cc *grpc.ClientConn) FilesServiceClient {
	return &filesServiceClient{cc}
}

func (c *filesServiceClient) ZipFiles(ctx context.Context, in *ZipRequest, opts ...grpc.CallOption) (*Path, error) {
	out := new(Path)
	err := grpc.Invoke(ctx, "/files.FilesService/ZipFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) GetFileInfo(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*DirectoryContent, error) {
	out := new(DirectoryContent)
	err := grpc.Invoke(ctx, "/files.FilesService/GetFileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) UpdateFileInfo(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/files.FilesService/UpdateFileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) CreateFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/files.FilesService/CreateFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) DeleteFile(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/files.FilesService/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) ShareFile(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/files.FilesService/ShareFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) SearchForFile(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/files.FilesService/SearchForFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) GetStarredFiles(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*DirectoryContent, error) {
	out := new(DirectoryContent)
	err := grpc.Invoke(ctx, "/files.FilesService/GetStarredFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) GetSharedFiles(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*DirectoryContent, error) {
	out := new(DirectoryContent)
	err := grpc.Invoke(ctx, "/files.FilesService/GetSharedFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) RescanOwnFiles(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/files.FilesService/RescanOwnFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) RescanUserFilesByID(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/files.FilesService/RescanUserFilesByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) GetUpdateNotifications(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (FilesService_GetUpdateNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FilesService_serviceDesc.Streams[0], c.cc, "/files.FilesService/GetUpdateNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesServiceGetUpdateNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesService_GetUpdateNotificationsClient interface {
	Recv() (*EmptyMessage, error)
	grpc.ClientStream
}

type filesServiceGetUpdateNotificationsClient struct {
	grpc.ClientStream
}

func (x *filesServiceGetUpdateNotificationsClient) Recv() (*EmptyMessage, error) {
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FilesService service

type FilesServiceServer interface {
	ZipFiles(context.Context, *ZipRequest) (*Path, error)
	GetFileInfo(context.Context, *PathRequest) (*DirectoryContent, error)
	UpdateFileInfo(context.Context, *FileInfo) (*FileInfo, error)
	CreateFile(context.Context, *FileInfo) (*FileInfo, error)
	DeleteFile(context.Context, *PathRequest) (*EmptyMessage, error)
	ShareFile(context.Context, *ShareRequest) (*EmptyMessage, error)
	SearchForFile(context.Context, *SearchRequest) (*FileInfo, error)
	GetStarredFiles(context.Context, *Authentication) (*DirectoryContent, error)
	GetSharedFiles(context.Context, *Authentication) (*DirectoryContent, error)
	RescanOwnFiles(context.Context, *Authentication) (*EmptyMessage, error)
	RescanUserFilesByID(context.Context, *Authentication) (*EmptyMessage, error)
	GetUpdateNotifications(*Authentication, FilesService_GetUpdateNotificationsServer) error
}

func RegisterFilesServiceServer(s *grpc.Server, srv FilesServiceServer) {
	s.RegisterService(&_FilesService_serviceDesc, srv)
}

func _FilesService_ZipFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).ZipFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/ZipFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).ZipFiles(ctx, req.(*ZipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).GetFileInfo(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_UpdateFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).UpdateFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/UpdateFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).UpdateFileInfo(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).DeleteFile(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_ShareFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).ShareFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/ShareFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).ShareFile(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_SearchForFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).SearchForFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/SearchForFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).SearchForFile(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_GetStarredFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).GetStarredFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/GetStarredFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).GetStarredFiles(ctx, req.(*Authentication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_GetSharedFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).GetSharedFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/GetSharedFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).GetSharedFiles(ctx, req.(*Authentication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_RescanOwnFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).RescanOwnFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/RescanOwnFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).RescanOwnFiles(ctx, req.(*Authentication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_RescanUserFilesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).RescanUserFilesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/RescanUserFilesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).RescanUserFilesByID(ctx, req.(*Authentication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_GetUpdateNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Authentication)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServiceServer).GetUpdateNotifications(m, &filesServiceGetUpdateNotificationsServer{stream})
}

type FilesService_GetUpdateNotificationsServer interface {
	Send(*EmptyMessage) error
	grpc.ServerStream
}

type filesServiceGetUpdateNotificationsServer struct {
	grpc.ServerStream
}

func (x *filesServiceGetUpdateNotificationsServer) Send(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _FilesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "files.FilesService",
	HandlerType: (*FilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZipFiles",
			Handler:    _FilesService_ZipFiles_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FilesService_GetFileInfo_Handler,
		},
		{
			MethodName: "UpdateFileInfo",
			Handler:    _FilesService_UpdateFileInfo_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FilesService_CreateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FilesService_DeleteFile_Handler,
		},
		{
			MethodName: "ShareFile",
			Handler:    _FilesService_ShareFile_Handler,
		},
		{
			MethodName: "SearchForFile",
			Handler:    _FilesService_SearchForFile_Handler,
		},
		{
			MethodName: "GetStarredFiles",
			Handler:    _FilesService_GetStarredFiles_Handler,
		},
		{
			MethodName: "GetSharedFiles",
			Handler:    _FilesService_GetSharedFiles_Handler,
		},
		{
			MethodName: "RescanOwnFiles",
			Handler:    _FilesService_RescanOwnFiles_Handler,
		},
		{
			MethodName: "RescanUserFilesByID",
			Handler:    _FilesService_RescanUserFilesByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdateNotifications",
			Handler:       _FilesService_GetUpdateNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files.proto",
}

func init() { proto.RegisterFile("files.proto", fileDescriptor_files_821f6ef1973575c1) }

var fileDescriptor_files_821f6ef1973575c1 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xae, 0xf3, 0x68, 0xe3, 0x49, 0x93, 0xc2, 0xb6, 0xd0, 0x95, 0x85, 0x84, 0xe5, 0x93, 0x25,
	0x20, 0xad, 0x0a, 0x07, 0x90, 0xb8, 0xb4, 0x75, 0x1b, 0x45, 0xe2, 0x51, 0x39, 0x2d, 0x48, 0xbd,
	0x6d, 0x93, 0x49, 0xb2, 0x92, 0x5f, 0xdd, 0xdd, 0x50, 0x85, 0x1f, 0xc2, 0x8f, 0xe5, 0x84, 0x76,
	0x6d, 0x27, 0x51, 0xd5, 0x00, 0x0a, 0xdc, 0xe6, 0xfb, 0x3c, 0xdf, 0xb7, 0xe3, 0x79, 0x40, 0x73,
	0xc4, 0x23, 0x94, 0x9d, 0x4c, 0xa4, 0x2a, 0x25, 0x75, 0x03, 0x9c, 0xd6, 0x18, 0x13, 0x14, 0x2c,
	0xca, 0x59, 0xe7, 0xf9, 0x38, 0x4d, 0xc7, 0x11, 0x1e, 0x18, 0x74, 0x33, 0x1d, 0x1d, 0x28, 0x1e,
	0xa3, 0x54, 0x2c, 0xce, 0xf2, 0x04, 0xef, 0x2b, 0xc0, 0x35, 0xcf, 0x42, 0xbc, 0x9d, 0xa2, 0x54,
	0xe4, 0x05, 0xd4, 0xd8, 0x54, 0x4d, 0xa8, 0xe5, 0x5a, 0x7e, 0xf3, 0x68, 0xbf, 0x53, 0x9a, 0x1d,
	0x4f, 0xd5, 0x04, 0x13, 0xc5, 0x07, 0x4c, 0xf1, 0x34, 0x09, 0x4d, 0x12, 0x79, 0x06, 0xf6, 0x68,
	0x1a, 0x45, 0x17, 0x4c, 0x4d, 0x24, 0xad, 0xb8, 0x55, 0xdf, 0x0e, 0x17, 0x84, 0xf7, 0x05, 0x9a,
	0x3a, 0x58, 0xcb, 0xd9, 0x81, 0x46, 0x69, 0x44, 0x2b, 0xae, 0xe5, 0xdb, 0xe1, 0x1c, 0x7b, 0x17,
	0xd0, 0xea, 0x23, 0x13, 0x83, 0xf5, 0x9c, 0x09, 0xd4, 0x14, 0x8a, 0xb8, 0x70, 0x35, 0xb1, 0x77,
	0x0b, 0xdb, 0xfd, 0x09, 0x13, 0xf8, 0xbf, 0x4b, 0x25, 0x14, 0xb6, 0xa6, 0x12, 0x45, 0x2f, 0x90,
	0xb4, 0xea, 0x56, 0xfd, 0x56, 0x58, 0x42, 0xef, 0x18, 0x1e, 0x05, 0x5c, 0xe0, 0x40, 0xa5, 0x62,
	0x76, 0x9a, 0x26, 0x0a, 0x13, 0x45, 0x5e, 0x81, 0xad, 0x47, 0xd8, 0x4b, 0x46, 0xa9, 0xa4, 0x96,
	0x5b, 0xf5, 0x9b, 0x47, 0x3b, 0x9d, 0x7c, 0xc2, 0xe7, 0x05, 0x1f, 0x2e, 0x32, 0x3c, 0x07, 0x6a,
	0xe6, 0x11, 0x02, 0xb5, 0x8c, 0x15, 0xd5, 0xda, 0xa1, 0x89, 0xbd, 0x1f, 0x15, 0x68, 0x94, 0x1a,
	0xd2, 0x86, 0x4a, 0x2f, 0x30, 0x9f, 0x5b, 0x61, 0xa5, 0x17, 0xcc, 0x05, 0x95, 0x85, 0x40, 0x73,
	0x09, 0x8b, 0x91, 0x56, 0x73, 0x4e, 0xc7, 0x64, 0x0f, 0xea, 0x5c, 0x06, 0x5c, 0xd0, 0x9a, 0x6b,
	0xf9, 0x8d, 0x30, 0x07, 0x3a, 0x53, 0xf2, 0xef, 0x48, 0xeb, 0xae, 0xe5, 0x57, 0x43, 0x13, 0xeb,
	0xff, 0x4c, 0xef, 0x12, 0xfd, 0x67, 0x74, 0xd3, 0x3c, 0x53, 0x42, 0xdd, 0x9d, 0x98, 0xc7, 0x78,
	0x39, 0xcb, 0x90, 0x6e, 0xe5, 0xdd, 0x29, 0xb1, 0x56, 0x49, 0xc5, 0x84, 0xc0, 0x21, 0x6d, 0x98,
	0x17, 0x4a, 0xa8, 0x55, 0x19, 0x13, 0x98, 0xa8, 0x5e, 0x40, 0x6d, 0x63, 0x38, 0xc7, 0xe4, 0x3d,
	0x34, 0x23, 0x26, 0xd5, 0xe9, 0x84, 0x25, 0x63, 0x1c, 0x52, 0x30, 0x33, 0x72, 0x3a, 0xf9, 0x9a,
	0x77, 0xca, 0x35, 0xef, 0x5c, 0x96, 0x6b, 0x1e, 0x2e, 0xa7, 0x1f, 0xfd, 0xac, 0xc3, 0xb6, 0x6e,
	0x8c, 0xec, 0xa3, 0xf8, 0xc6, 0x07, 0x48, 0x5e, 0x42, 0xe3, 0x9a, 0x67, 0x86, 0x22, 0x8f, 0x8b,
	0x6e, 0x2f, 0xee, 0xc1, 0x69, 0x16, 0x94, 0xd9, 0xbc, 0x0d, 0xfd, 0x78, 0x17, 0xd5, 0xbc, 0xb3,
	0x64, 0xe9, 0x6b, 0xa9, 0xd8, 0x2f, 0xb8, 0xfb, 0xe3, 0xf5, 0x36, 0xc8, 0x1b, 0x68, 0x5f, 0x65,
	0x43, 0xa6, 0x70, 0x6e, 0x70, 0x7f, 0xbe, 0xce, 0x7d, 0xc2, 0xdb, 0x20, 0x87, 0x00, 0xa7, 0x02,
	0x0b, 0xd5, 0x5f, 0x29, 0xde, 0x01, 0x04, 0x18, 0x61, 0xa1, 0x78, 0xa8, 0xc8, 0x27, 0xf3, 0x9d,
	0x3e, 0x8b, 0x33, 0x35, 0xfb, 0x88, 0x52, 0xb2, 0x31, 0x1a, 0xa9, 0x6d, 0x4e, 0xc1, 0x28, 0x77,
	0x0b, 0xe5, 0xf2, 0x71, 0xac, 0x96, 0xbe, 0x2d, 0xef, 0xf2, 0x3c, 0x15, 0x46, 0xbe, 0x57, 0xca,
	0x97, 0xaf, 0xf5, 0xa1, 0x7a, 0xcf, 0x60, 0xa7, 0x8b, 0xaa, 0x9f, 0x0f, 0x3f, 0x1f, 0xc5, 0xaa,
	0xa3, 0xfb, 0x5d, 0x7b, 0x03, 0x68, 0x6b, 0x1b, 0x5d, 0xec, 0x3f, 0xb8, 0x9c, 0x40, 0x3b, 0x44,
	0x39, 0x60, 0xc9, 0xe7, 0xbb, 0xe4, 0x0f, 0x2e, 0x2b, 0x5b, 0xd1, 0x85, 0xdd, 0xdc, 0xe3, 0x4a,
	0xa2, 0xe9, 0x85, 0x3c, 0x99, 0xf5, 0x82, 0x35, 0x8c, 0x3e, 0xc0, 0xd3, 0x2e, 0xaa, 0x7c, 0x69,
	0x3e, 0xa5, 0x8a, 0x8f, 0x0a, 0xc5, 0x1a, 0x45, 0x1d, 0x5a, 0x27, 0x8d, 0xeb, 0xcd, 0x38, 0x1d,
	0x62, 0x24, 0x6f, 0x36, 0xcd, 0x9d, 0xbc, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x73, 0x9a, 0x42,
	0x2a, 0x41, 0x06, 0x00, 0x00,
}
