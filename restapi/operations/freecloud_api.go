// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freecloudio/server/restapi/operations/auth"
	"github.com/freecloudio/server/restapi/operations/file"
	"github.com/freecloudio/server/restapi/operations/system"
	"github.com/freecloudio/server/restapi/operations/user"

	models "github.com/freecloudio/server/models"
)

// NewFreecloudAPI creates a new Freecloud instance
func NewFreecloudAPI(spec *loads.Document) *FreecloudAPI {
	return &FreecloudAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		GzipProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("gzip producer has not yet been implemented")
		}),
		JSONProducer: runtime.JSONProducer(),
		FileCreateFileHandler: file.CreateFileHandlerFunc(func(params file.CreateFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileCreateFile has not yet been implemented")
		}),
		UserDeleteCurrentUserHandler: user.DeleteCurrentUserHandlerFunc(func(params user.DeleteCurrentUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteCurrentUser has not yet been implemented")
		}),
		FileDeleteFileHandler: file.DeleteFileHandlerFunc(func(params file.DeleteFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileDeleteFile has not yet been implemented")
		}),
		UserDeleteUserByIDHandler: user.DeleteUserByIDHandlerFunc(func(params user.DeleteUserByIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteUserByID has not yet been implemented")
		}),
		FileDownloadFileHandler: file.DownloadFileHandlerFunc(func(params file.DownloadFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileDownloadFile has not yet been implemented")
		}),
		UserGetCurrentUserHandler: user.GetCurrentUserHandlerFunc(func(params user.GetCurrentUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserGetCurrentUser has not yet been implemented")
		}),
		FileGetPathInfoHandler: file.GetPathInfoHandlerFunc(func(params file.GetPathInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileGetPathInfo has not yet been implemented")
		}),
		FileGetStarredFileInfosHandler: file.GetStarredFileInfosHandlerFunc(func(params file.GetStarredFileInfosParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileGetStarredFileInfos has not yet been implemented")
		}),
		SystemGetSystemStatsHandler: system.GetSystemStatsHandlerFunc(func(params system.GetSystemStatsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SystemGetSystemStats has not yet been implemented")
		}),
		UserGetUserByIDHandler: user.GetUserByIDHandlerFunc(func(params user.GetUserByIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserGetUserByID has not yet been implemented")
		}),
		AuthLoginHandler: auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthLogin has not yet been implemented")
		}),
		AuthLogoutHandler: auth.LogoutHandlerFunc(func(params auth.LogoutParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation AuthLogout has not yet been implemented")
		}),
		FileRescanCurrentUserHandler: file.RescanCurrentUserHandlerFunc(func(params file.RescanCurrentUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileRescanCurrentUser has not yet been implemented")
		}),
		FileRescanUserByIDHandler: file.RescanUserByIDHandlerFunc(func(params file.RescanUserByIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileRescanUserByID has not yet been implemented")
		}),
		FileSearchFileHandler: file.SearchFileHandlerFunc(func(params file.SearchFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileSearchFile has not yet been implemented")
		}),
		FileShareFilesHandler: file.ShareFilesHandlerFunc(func(params file.ShareFilesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileShareFiles has not yet been implemented")
		}),
		AuthSignupHandler: auth.SignupHandlerFunc(func(params auth.SignupParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthSignup has not yet been implemented")
		}),
		UserUpdateCurrentUserHandler: user.UpdateCurrentUserHandlerFunc(func(params user.UpdateCurrentUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserUpdateCurrentUser has not yet been implemented")
		}),
		FileUpdateFileHandler: file.UpdateFileHandlerFunc(func(params file.UpdateFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileUpdateFile has not yet been implemented")
		}),
		UserUpdateUserByIDHandler: user.UpdateUserByIDHandlerFunc(func(params user.UpdateUserByIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserUpdateUserByID has not yet been implemented")
		}),
		FileUploadFileHandler: file.UploadFileHandlerFunc(func(params file.UploadFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileUploadFile has not yet been implemented")
		}),
		FileZipFilesHandler: file.ZipFilesHandlerFunc(func(params file.ZipFilesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FileZipFiles has not yet been implemented")
		}),

		TokenAuthAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (TokenAuth) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*FreecloudAPI This is the API for the freecloud server. */
type FreecloudAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// GzipProducer registers a producer for a "application/gzip" mime type
	GzipProducer runtime.Producer
	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// TokenAuthAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	TokenAuthAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// FileCreateFileHandler sets the operation handler for the create file operation
	FileCreateFileHandler file.CreateFileHandler
	// UserDeleteCurrentUserHandler sets the operation handler for the delete current user operation
	UserDeleteCurrentUserHandler user.DeleteCurrentUserHandler
	// FileDeleteFileHandler sets the operation handler for the delete file operation
	FileDeleteFileHandler file.DeleteFileHandler
	// UserDeleteUserByIDHandler sets the operation handler for the delete user by ID operation
	UserDeleteUserByIDHandler user.DeleteUserByIDHandler
	// FileDownloadFileHandler sets the operation handler for the download file operation
	FileDownloadFileHandler file.DownloadFileHandler
	// UserGetCurrentUserHandler sets the operation handler for the get current user operation
	UserGetCurrentUserHandler user.GetCurrentUserHandler
	// FileGetPathInfoHandler sets the operation handler for the get path info operation
	FileGetPathInfoHandler file.GetPathInfoHandler
	// FileGetStarredFileInfosHandler sets the operation handler for the get starred file infos operation
	FileGetStarredFileInfosHandler file.GetStarredFileInfosHandler
	// SystemGetSystemStatsHandler sets the operation handler for the get system stats operation
	SystemGetSystemStatsHandler system.GetSystemStatsHandler
	// UserGetUserByIDHandler sets the operation handler for the get user by ID operation
	UserGetUserByIDHandler user.GetUserByIDHandler
	// AuthLoginHandler sets the operation handler for the login operation
	AuthLoginHandler auth.LoginHandler
	// AuthLogoutHandler sets the operation handler for the logout operation
	AuthLogoutHandler auth.LogoutHandler
	// FileRescanCurrentUserHandler sets the operation handler for the rescan current user operation
	FileRescanCurrentUserHandler file.RescanCurrentUserHandler
	// FileRescanUserByIDHandler sets the operation handler for the rescan user by ID operation
	FileRescanUserByIDHandler file.RescanUserByIDHandler
	// FileSearchFileHandler sets the operation handler for the search file operation
	FileSearchFileHandler file.SearchFileHandler
	// FileShareFilesHandler sets the operation handler for the share files operation
	FileShareFilesHandler file.ShareFilesHandler
	// AuthSignupHandler sets the operation handler for the signup operation
	AuthSignupHandler auth.SignupHandler
	// UserUpdateCurrentUserHandler sets the operation handler for the update current user operation
	UserUpdateCurrentUserHandler user.UpdateCurrentUserHandler
	// FileUpdateFileHandler sets the operation handler for the update file operation
	FileUpdateFileHandler file.UpdateFileHandler
	// UserUpdateUserByIDHandler sets the operation handler for the update user by ID operation
	UserUpdateUserByIDHandler user.UpdateUserByIDHandler
	// FileUploadFileHandler sets the operation handler for the upload file operation
	FileUploadFileHandler file.UploadFileHandler
	// FileZipFilesHandler sets the operation handler for the zip files operation
	FileZipFilesHandler file.ZipFilesHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *FreecloudAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *FreecloudAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *FreecloudAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *FreecloudAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *FreecloudAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *FreecloudAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *FreecloudAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the FreecloudAPI
func (o *FreecloudAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.GzipProducer == nil {
		unregistered = append(unregistered, "GzipProducer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TokenAuthAuth == nil {
		unregistered = append(unregistered, "TokenAuthAuth")
	}

	if o.FileCreateFileHandler == nil {
		unregistered = append(unregistered, "file.CreateFileHandler")
	}

	if o.UserDeleteCurrentUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteCurrentUserHandler")
	}

	if o.FileDeleteFileHandler == nil {
		unregistered = append(unregistered, "file.DeleteFileHandler")
	}

	if o.UserDeleteUserByIDHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserByIDHandler")
	}

	if o.FileDownloadFileHandler == nil {
		unregistered = append(unregistered, "file.DownloadFileHandler")
	}

	if o.UserGetCurrentUserHandler == nil {
		unregistered = append(unregistered, "user.GetCurrentUserHandler")
	}

	if o.FileGetPathInfoHandler == nil {
		unregistered = append(unregistered, "file.GetPathInfoHandler")
	}

	if o.FileGetStarredFileInfosHandler == nil {
		unregistered = append(unregistered, "file.GetStarredFileInfosHandler")
	}

	if o.SystemGetSystemStatsHandler == nil {
		unregistered = append(unregistered, "system.GetSystemStatsHandler")
	}

	if o.UserGetUserByIDHandler == nil {
		unregistered = append(unregistered, "user.GetUserByIDHandler")
	}

	if o.AuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.LoginHandler")
	}

	if o.AuthLogoutHandler == nil {
		unregistered = append(unregistered, "auth.LogoutHandler")
	}

	if o.FileRescanCurrentUserHandler == nil {
		unregistered = append(unregistered, "file.RescanCurrentUserHandler")
	}

	if o.FileRescanUserByIDHandler == nil {
		unregistered = append(unregistered, "file.RescanUserByIDHandler")
	}

	if o.FileSearchFileHandler == nil {
		unregistered = append(unregistered, "file.SearchFileHandler")
	}

	if o.FileShareFilesHandler == nil {
		unregistered = append(unregistered, "file.ShareFilesHandler")
	}

	if o.AuthSignupHandler == nil {
		unregistered = append(unregistered, "auth.SignupHandler")
	}

	if o.UserUpdateCurrentUserHandler == nil {
		unregistered = append(unregistered, "user.UpdateCurrentUserHandler")
	}

	if o.FileUpdateFileHandler == nil {
		unregistered = append(unregistered, "file.UpdateFileHandler")
	}

	if o.UserUpdateUserByIDHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserByIDHandler")
	}

	if o.FileUploadFileHandler == nil {
		unregistered = append(unregistered, "file.UploadFileHandler")
	}

	if o.FileZipFilesHandler == nil {
		unregistered = append(unregistered, "file.ZipFilesHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *FreecloudAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *FreecloudAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "TokenAuth":

			result[name] = o.BearerAuthenticator(scheme.Name, func(token string, scopes []string) (interface{}, error) {
				return o.TokenAuthAuth(token, scopes)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *FreecloudAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *FreecloudAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *FreecloudAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/gzip":
			result["application/gzip"] = o.GzipProducer

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *FreecloudAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the freecloud API
func (o *FreecloudAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *FreecloudAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/file"] = file.NewCreateFile(o.context, o.FileCreateFileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/me"] = user.NewDeleteCurrentUser(o.context, o.UserDeleteCurrentUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/file"] = file.NewDeleteFile(o.context, o.FileDeleteFileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/{id}"] = user.NewDeleteUserByID(o.context, o.UserDeleteUserByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/download"] = file.NewDownloadFile(o.context, o.FileDownloadFileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/me"] = user.NewGetCurrentUser(o.context, o.UserGetCurrentUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/file"] = file.NewGetPathInfo(o.context, o.FileGetPathInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/starred"] = file.NewGetStarredFileInfos(o.context, o.FileGetStarredFileInfosHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/stats"] = system.NewGetSystemStats(o.context, o.SystemGetSystemStatsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{id}"] = user.NewGetUserByID(o.context, o.UserGetUserByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/login"] = auth.NewLogin(o.context, o.AuthLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/logout"] = auth.NewLogout(o.context, o.AuthLogoutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rescan/me"] = file.NewRescanCurrentUser(o.context, o.FileRescanCurrentUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rescan/{id}"] = file.NewRescanUserByID(o.context, o.FileRescanUserByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = file.NewSearchFile(o.context, o.FileSearchFileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/share"] = file.NewShareFiles(o.context, o.FileShareFilesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/signup"] = auth.NewSignup(o.context, o.AuthSignupHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/user/me"] = user.NewUpdateCurrentUser(o.context, o.UserUpdateCurrentUserHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/file"] = file.NewUpdateFile(o.context, o.FileUpdateFileHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/user/{id}"] = user.NewUpdateUserByID(o.context, o.UserUpdateUserByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/upload"] = file.NewUploadFile(o.context, o.FileUploadFileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zip"] = file.NewZipFiles(o.context, o.FileZipFilesHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *FreecloudAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *FreecloudAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *FreecloudAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *FreecloudAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
