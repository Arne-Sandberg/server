// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/freecloudio/server/models"
)

// GetShareEntryByIDHandlerFunc turns a function with the right signature into a get share entry by ID handler
type GetShareEntryByIDHandlerFunc func(GetShareEntryByIDParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetShareEntryByIDHandlerFunc) Handle(params GetShareEntryByIDParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetShareEntryByIDHandler interface for that can handle valid get share entry by ID params
type GetShareEntryByIDHandler interface {
	Handle(GetShareEntryByIDParams, *models.Principal) middleware.Responder
}

// NewGetShareEntryByID creates a new http.Handler for the get share entry by ID operation
func NewGetShareEntryByID(ctx *middleware.Context, handler GetShareEntryByIDHandler) *GetShareEntryByID {
	return &GetShareEntryByID{Context: ctx, Handler: handler}
}

/*GetShareEntryByID swagger:route GET /file/share/{shareID} file getShareEntryById

Get share entry by shareID

*/
type GetShareEntryByID struct {
	Context *middleware.Context
	Handler GetShareEntryByIDHandler
}

func (o *GetShareEntryByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetShareEntryByIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
