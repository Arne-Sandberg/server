// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/freecloudio/server/models"
)

// ZipFilesHandlerFunc turns a function with the right signature into a zip files handler
type ZipFilesHandlerFunc func(ZipFilesParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ZipFilesHandlerFunc) Handle(params ZipFilesParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ZipFilesHandler interface for that can handle valid zip files params
type ZipFilesHandler interface {
	Handle(ZipFilesParams, *models.Principal) middleware.Responder
}

// NewZipFiles creates a new http.Handler for the zip files operation
func NewZipFiles(ctx *middleware.Context, handler ZipFilesHandler) *ZipFiles {
	return &ZipFiles{Context: ctx, Handler: handler}
}

/*ZipFiles swagger:route POST /file/zip file zipFiles

Creates a zip archive from files

*/
type ZipFiles struct {
	Context *middleware.Context
	Handler ZipFilesHandler
}

func (o *ZipFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewZipFilesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
