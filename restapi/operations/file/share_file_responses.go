// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/freecloudio/freecloud/models"
)

// ShareFileOKCode is the HTTP code returned for type ShareFileOK
const ShareFileOKCode int = 200

/*ShareFileOK Success

swagger:response shareFileOK
*/
type ShareFileOK struct {
}

// NewShareFileOK creates ShareFileOK with default headers values
func NewShareFileOK() *ShareFileOK {

	return &ShareFileOK{}
}

// WriteResponse to the client
func (o *ShareFileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*ShareFileDefault Unexpected error

swagger:response shareFileDefault
*/
type ShareFileDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewShareFileDefault creates ShareFileDefault with default headers values
func NewShareFileDefault(code int) *ShareFileDefault {
	if code <= 0 {
		code = 500
	}

	return &ShareFileDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the share file default response
func (o *ShareFileDefault) WithStatusCode(code int) *ShareFileDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the share file default response
func (o *ShareFileDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the share file default response
func (o *ShareFileDefault) WithPayload(payload *models.Error) *ShareFileDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the share file default response
func (o *ShareFileDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShareFileDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
